library(pacman)
p_load(tswge, dplyr, kableExtra, sqldf)
files = list.files(path='../DatabaseProject/Stocks/NASDAQ_Daily', pattern='*.csv')
for(file in files){
actualFile <- paste0('../DatabaseProject/Stocks/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
bicfive <- aic5.wge(df$low, p=0:10, q=0:10, type="bic")
# if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
if(bicfive$`       aic` < 0){
z <- data.frame(file, bicfive$`   p`, bicfive$`   q`, bicfive$`       bic`)
colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#write.table(z, './z.csv', append=T)
write.table(z, './models_bic_less_than_0.csv', append=T)
}
aicfive <- aic5.wge(df$low, p=0:10, q=0:10, type="aic")
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       bic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
for(file in files){
actualFile <- paste0('../DatabaseProject/Stocks/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       bic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
for(file in files){
actualFile <- paste0('../DatabaseProject/Stocks/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, p=0:10, q=0:10, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
for(file in files){
actualFile <- paste0('../DatabaseProject/Stocks/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, p=0:15, q=0:15, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
data(airlog)
- 0.99*B)(1 - 0.28*B + 0.19*B^2))(X_t + 0.17) = a_t*(1 - 0.63*B); note (1 - 0.99*B) = (1 - B); this is
# nearly non-stationary
fore.aruma.wge(hadley, d=1, phi=c(0.33, -0.18), theta=0.7, n.ahead=50, limits=T)
data(hadley)
mean(hadley) # -0.1684937, rounds to roughly -0.17
plotts.sample.wge(hadley)
aic5.wge(hadley, p=0:6, q=0:1)
# AIC picks an ARMA(3,1) stationary model
had.est = est.arma.wge(hadley, p=3, q=1)
had.est # Fitted model: (1 - 1.27*B + 0.47*B^2 - 0.19*B^3)(X_t + 0.17) = a_t*(1 - 0.63*B), (sigmaHAT_a)^2 = 0.0107
# in factored form: (1 - 0.99*B)(1 - 0.28*B + 0.19*B^2))(X_t + 0.17) = a_t*(1 - 0.63*B); note (1 - 0.99*B) = (1 - B); this is
# nearly non-stationary
# CHECK THE RESIDS:
plotts.sample.wge(had.est$res, arlimits=T)
ljung.wge(had.est$res, p=3, q=1) # p-value = 0.421 so we do not reject the null; this is likely white noise
ljung.wge(had.est$res, p=3, q=1, K=48) # again, p-value = 0.421 so we do not reject the null; this is likely white noise
# Because the residuals appear white, the model represents the data well since the residuals/error are white noise
##################
# Non-stationary approach to the hadley temperature data (under assumption (1 - 0.99B) is (1-B), a difference (non-stationary))
##################
# Difference
d1.temp = artrans.wge(hadley, phi.tr=1)
plotts.sample.wge(d1.temp, arlimits=T)
# Model Stationary
aic5.wge(d1.temp, p=0:6, q=0:1)
d1.temp.est = est.arma.wge(d1.temp, p=2, q=1)
# Fitted ARIMA(2,1,1) model: (1 - B)(1 - 0.33*B + 0.18*B^2)(X_t + 0.17) = a_t*(1 - 0.70*B), (sigmaHAT_a)^2 = 0.0106
# Check for "Whitened" Residuals
plotts.sample..wge(d1.temp.est$res, arlimits=T)
ljung.wge(d1.temp.est$res, p=2, q=1) # we fail to reject Ho; this is most likley white noise
ljung.wge(d1.temp.est$res, p=2, q=1, K=48) # we fail to reject Ho; this is most likley white noise
# This model has a correlation-based behavior pattern, but could be confused with deterministic trend. There is enough variance in the
# behavior to break from signal plus noise.
##### MODEL SUMMARY:
# Stationary Model: (1 - 0.99*B)(1 - 0.28*B + 0.19*B^2))(X_t + 0.17) = a_t*(1 - 0.63*B)
# Non-Stationary Model: (1 - B)(1 - 0.33*B + 0.18*B^2)(X_t + 0.17) = a_t*(1 - 0.70*B)
# Forecasts
fore.arma.wge(hadley, phi=c(1.27, -0.47, 0.19), theta= 0.3, n.ahead=50, limits=F)
fore.aruma.wge(hadley, d=1, phi=c(0.33, -0.18), theta=0.7, n.ahead=50, limits=T)
fore.aruma.wge(hadley, d=1, phi=c(0.33, -0.18), theta=0.7, n.ahead=50, limits=F)
files = list.files(path='../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily', pattern='*.csv')
for(file in files){
actualFile <- paste0('../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, p=0:15, q=0:15, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
files = list.files(path='../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily', pattern='*.csv')
for(file in files){
actualFile <- paste0('../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, p=0:15, q=0:15, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
files = list.files(path='../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily', pattern='*.csv')
for(file in files){
actualFile <- paste0('../TS6373/CUsersPabloDesktopDatabaseProjectStocksNASDAQ_Daily/NASDAQ_Daily/',file)
df <- read.csv(actualFile)
#newdf <- artrans.wge(df, phi.tr=1)
aicfive <- aic5.wge(df$low, p=0:15, q=0:15, type="aic")
#  if((aicfive$`   p`[1] == 0 && aicfive$`   q`[1] == 0 && aicfive$`       aic` < 0) | (aicfive$`   p`[2] == 0 && aicfive$`   q`[2] == 0 && aicfive$`       aic` < 3) | (aicfive$`   p`[3] == 0 && aicfive$`   q`[3] == 0 && aicfive$`       aic` < 0)){
#    z <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
#    colnames(z) <- NULL
#colnames(z) <- c("rank&stock","p","q","AIC")
#z
#    write.table(z, './z.csv', append=T)
#  }
if(aicfive$`       aic` < 0){
y <- data.frame(file, aicfive$`   p`, aicfive$`   q`, aicfive$`       aic`)
colnames(y) <- NULL
write.table(y, './models_aic_less_than_0.csv', append=T)
}
#  Sys.sleep(0.5)
}
sun <- read.csv('c:/users/pablo/desktop/Sunspot Numbers Thru 2018.csv', header=T, strip.white=T)
sun
as.character(sun$Year)
str_replace(as.character(sun$Year), ".5","")
stringr::str_replace(as.character(sun$Year), ".5","")
as.date(stringr::str_replace(as.character(sun$Year), ".5",""))
class(sun$Year)
as.numeric(stringr::str_replace(as.character(sun$Year), ".5",""))
stringr::str_replace(as.character(sun$Year), ".5","")
as.character(sun$Year)
stringr::str_replace(as.character(sun$Year), ".5$","")
as.numeric(stringr::str_replace(as.character(sun$Year), ".5$",""))
sun$Year <- as.numeric(stringr::str_replace(as.character(sun$Year), ".5$",""))
head(sun)
plotts.sample.wge(sun$SunSpots, arlimits=T)
aic5.wge(sun$SunSpots, p=0:10, q=0:6, type="mle")
aic5.wge(sun$SunSpots, p=0:10, q=0:6, type="burg")
sun$SunSpots
aic5.wge(sun$SunSpots, type="burg")
aic5.wge(sun$SunSpots, type="aic")
aic5.wge(sun$SunSpots, type="bic")
est.ar.wge(sun$SunSpots, p=3, factor=T, type="mle")
o generate an ASE from forecasting the last 15 years of sunspot data. You will use this to compare your models to
# your peers' models.
sun_forecast <- fore.arma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), n.ahead=15, lastn=T)
sun_ASE = mean((sun$SunSpots[(nrow(sun)-15+1):nrow(sun)] - sun_forecast$f)^2)
sun_ASE
est.ar.wge(sun$SunSpots, p=10, factor=T, type="mle")
factor.wge(phi=c(rep(0,11),1))
est.ar.wge(sun$SunSpots, p=15, factor=T, type="mle")
factor.wge(phi=c(rep(0,11),1))
plotts.sample.wge(sun$SunSpots, arlimits=T)
factor.wge(phi=c(rep(0,10),1))
est.ar.wge(sun$SunSpots, p=10, factor=T, type="mle")
factor.wge(phi=c(rep(0,10),1))
est.ar.wge(sun$SunSpots, p=12, factor=T, type="mle")
est.ar.wge(sun$SunSpots, p=14, factor=T, type="mle")
sun_ASE
fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=12, n.ahead=15, lastn=T)
fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
sun_forecast <- fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=10, n.ahead=15, lastn=T)
sun_forecast <- fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
est.ar.wge(sun$SunSpots, p=14, factor=T, type="mle")
x <- est.ar.wge(sun$SunSpots, p=14, factor=T, type="mle")
fore.aruma.wge(sun$SunSpots, phi=x$phi, s=11, n.ahead=15, lastn=T)
library(tswge)
library(dplyr)
dfPollute <- read.csv("C:/users/pablo/desktop/uspollution_pollution_us_2000_2016.csv")
dfNO2 <- dfPollute[,cbind("State","Date.Local","NO2.Mean")]
dfTexas <- dfNO2[which(dfNO2$State=="Texas"),]
dfTexas <- dfTexas %>% filter %>% subset(select=-State)
rownames(dfTexas) <- NULL
colnames(dfTexas) <- c("date","NO2_mean")
dfTexas$date <- as.factor(substring(dfTexas$date,1,7))
dfTexas <- dfTexas[,1:2]
dfTexas <- dfTexas %>% group_by(date) %>% summarize(mean(round(NO2_mean, digits=5))) %>% data.frame()
colnames(dfTexas) <- c("date","NO2_mean")
est.ar.wge(dfTexas$NO2_mean, p=15)
est.ar.wge(sun$SunSpots, p=14, factor=T, type="mle")
factor.wge(phi=c(rep(0,10),1))
fore.aruma.wge(sun$SunSpots, phi=c(1.6078, -0.9409, -0.7247), s=11, n.ahead=15, lastn=T)
fore.aruma.wge(dfTexas$NO2_mean, phi=c(-0.3881, -0.6503, 0.7545), s=12, n.ahead=12, lastn=T)
est.ar.wge(dfTexas$NO2_mean, p=15)
est.ar.wge(sun$SunSpots, p=14)
fore.aruma.wge(sun$SunSpots, phi=c(1.6078, -0.9409, -0.7247), s=11, n.ahead=15, lastn=T)
fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
aic5.wge(dfTexas$NO2_mean)
est.ar.wge(dfTexas$NO2_mean, p=3)
fore.aruma.wge(dfTexas$NO2_mean, phi=c(0.9931383,0.1242930,-0.3562619), s=12, n.ahead=12, lastn=T)
fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
aic5.wge(sun$SunSpots)
est.ar.wge(sun$SunSpots, p=3, factor=T, type="mle")
fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
fore.arma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), n.ahead=15, lastn=T)
sun_forecast_aruma <- fore.aruma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), s=11, n.ahead=15, lastn=T)
sun_aruma_ASE = mean((sun$SunSpots[(nrow(sun)-15+1):nrow(sun)] - sun_forecast_aruma$f)^2) # mean((observed minus predicted) squared)
sun_aruma_ASE
fore.arma.wge(sun$SunSpots, phi=c(1.2820573, -0.4914963, -0.1446660), n.ahead=10, lastn=F)
######### Part B ##########
accuspike <- read.csv('c:/users/pablo/desktop/accuspike.csv.csv', header=T, strip.white=T)
plotts.sample.wge(accuspike, arlimits=F)
accuspike <- read.csv('c:/users/pablo/desktop/accuspike.csv.csv', header=T, strip.white=T)
plotts.sample.wge(accuspike, arlimits=F)
read.csv('c:/users/pablo/desktop/accuspike.csv.csv', header=T, strip.white=T)
accuspike <- read.csv('c:/users/pablo/desktop/accuspike.csv', header=T, strip.white=T)
plotts.sample.wge(accuspike, arlimits=F)
plotts.sample.wge(accuspike, arlimits=F)
plotts.sample.wge(accuspike$Active.Users, arlimits=F)
plotts.sample.wge(accuspike$Active.Users, arlimits=T)
artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,6),1))
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,6),1)) #1/0.140625 = s=7.11
plotts.sample.wge(x)
x = artrans.wge(accuspike$Active.Users, phi.tr=1) #1/0.140625 = s=7.11
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,6),1)) #1/0.140625 = s=7.11
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,7),1)) #1/0.140625 = s=7.11
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,8),1)) #1/0.140625 = s=7.11
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,5),1)) #1/0.140625 = s=7.11
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,6),1)) #1/0.140625 = s=7.11
plotts.sample.wge(x, arlimits=T)
plotts.sample.wge(accuspike$Active.Users, arlimits=T)
data(hadley)
plotts.sample.wge(hadley)
d1.temp = artrans.wge(hadley, phi.tr=1)
plotts.sample.wge(d1.temp, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=1)
plotts.sample.wge(x, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=1)
x = artrans.wge(accuspike$Active.Users, phi.tr=c(rep(0,6),1))
plotts.sample.wge(x, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=1) # attempt and stationarizing with a first difference
plotts.sample.wge(x, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=2) # attempt and stationarizing with a first difference
plotts.sample.wge(x, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=3) # attempt and stationarizing with a first difference
plotts.sample.wge(x, arlimits=T)
x = artrans.wge(accuspike$Active.Users, phi.tr=1) # attempt and stationarizing with a first difference
plotts.sample.wge(x, arlimits=T)
accuspike.d1 = artrans.wge(accuspike$Active.Users, phi.tr=1) # attempt and stationarizing with a first difference
plotts.sample.wge(accuspike.d1, arlimits=T)
?est.aruma.wge
?est.arma.wge
?est.arima.wge
est.aruma.wge(accuspike.d1, type="mle")
est.arma.wge(accuspike.d1, type="mle")
est.arma.wge(accuspike.d1, type="aic")
aic5.wge(accuspike.d1, type="mle")
aic5.wge(accuspike.d1, type="aic")
aic5.wge(accuspike.d1, type="bic")
est.arma.wge(accuspike.d1, p=5, q=1)
arma_51 <- est.arma.wge(accuspike.d1, p=5, q=1)
arma_50 <- est.arma.wge(accuspike.d1, p=5, q=0)
fore.aruma.wge(accuspike$Active.Users, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
plotts.sample.wge(arma_51$res, arlimits=T)
ljung.wge(arma_51$res, p=5, q=1)
nrow(hadley)
length(hadley)
ljung.wge(arma_51$res, p=2, q=1, K=48)
ljung.wge(arma_51$res, p=2, q=1, K=length(arma_51))
fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
fore.aruma.wge(accuspike.d1, phi=arma_50$phi, theta=arma_50$theta, d=1, n.ahead=10, lastn=T)
model_51 <- fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
model_50 <- fore.aruma.wge(accuspike.d1, phi=arma_50$phi, theta=arma_50$theta, d=1, n.ahead=10, lastn=T)
plotts.sample.wge(arma_50$res, arlimits=T)
ljung.wge(arma_50$res, p=5, q=1) # we fail to reject Ho; this is most likley white noise
ljung.wge(arma_50$res, p=5, q=0)
ljung.wge(arma_50$res, p=2, q=0, K=48)
?ljung.wge
ljung.wge(arma_50$res, p=2, q=0, K=28)
ljung.wge(arma_50$res, p=2, q=0, K=30)
ljung.wge(arma_50$res, p=2, q=0, K=25)
ljung.wge(arma_50$res, p=5, q=0) # we
ljung.wge(arma_51$res, p=2, q=1, K=25)
fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
fore.aruma.wge(accuspike.d1, phi=arma_50$phi, theta=arma_50$theta, d=1, n.ahead=10, lastn=T)
model_51 <- fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
model_51_forecast <- fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
model_51_ASE = mean((accuspike.d1[(nrow(accuspike.d1)-15+1):nrow(accuspike.d1)] - model_51_forecast$f)^2)
accuspike.d1[(nrow(accuspike.d1)-15+1):nrow(accuspike.d1)] - model_51_forecast$f)^2
nrow(accuspike.d1)
length(accuspike.d1)
model_51 <- fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
model_51_forecast <- fore.aruma.wge(accuspike.d1, phi=arma_51$phi, theta=arma_51$theta, d=1, n.ahead=10, lastn=T)
model_51_ASE = mean((accuspike.d1[(length(accuspike.d1)-15+1):length(accuspike.d1)] - model_51_forecast$f)^2)
model_51_ASE
model_50_forecast <- fore.aruma.wge(accuspike.d1, phi=arma_50$phi, theta=arma_50$theta, d=1, n.ahead=10, lastn=T)
model_50_ASE = mean((accuspike.d1[(length(accuspike.d1)-15+1):length(accuspike.d1)] - model_50_forecast$f)^2)
model_50_ASE
